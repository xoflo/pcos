// Mocks generated by Mockito 5.2.0 from annotations
// in thepcosprotocol_app/test/modules_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i9;
import 'package:thepcosprotocol_app/config/flavors.dart' as _i7;
import 'package:thepcosprotocol_app/constants/favourite_type.dart' as _i17;
import 'package:thepcosprotocol_app/controllers/preferences_controller.dart'
    as _i11;
import 'package:thepcosprotocol_app/models/all_favourites.dart' as _i4;
import 'package:thepcosprotocol_app/models/cms.dart' as _i22;
import 'package:thepcosprotocol_app/models/lesson.dart' as _i21;
import 'package:thepcosprotocol_app/models/lesson_task.dart' as _i15;
import 'package:thepcosprotocol_app/models/member.dart' as _i5;
import 'package:thepcosprotocol_app/models/message.dart' as _i16;
import 'package:thepcosprotocol_app/models/module.dart' as _i20;
import 'package:thepcosprotocol_app/models/module_export.dart' as _i19;
import 'package:thepcosprotocol_app/models/modules_and_lessons.dart' as _i3;
import 'package:thepcosprotocol_app/models/question.dart' as _i13;
import 'package:thepcosprotocol_app/models/recipe.dart' as _i14;
import 'package:thepcosprotocol_app/models/token.dart' as _i18;
import 'package:thepcosprotocol_app/providers/database_provider.dart' as _i8;
import 'package:thepcosprotocol_app/providers/provider_helper.dart' as _i12;
import 'package:thepcosprotocol_app/services/webservices.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWebServices_0 extends _i1.Fake implements _i2.WebServices {}

class _FakeModulesAndLessons_1 extends _i1.Fake
    implements _i3.ModulesAndLessons {}

class _FakeAllFavourites_2 extends _i1.Fake implements _i4.AllFavourites {}

class _FakeMember_3 extends _i1.Fake implements _i5.Member {}

class _FakeDateTime_4 extends _i1.Fake implements DateTime {}

class _FakeColor_5 extends _i1.Fake implements _i6.Color {}

class _FakeFlavorValues_6 extends _i1.Fake implements _i7.FlavorValues {}

/// A class which mocks [DatabaseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseProvider extends _i1.Mock implements _i8.DatabaseProvider {
  MockDatabaseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set db(_i9.Database? _db) => super.noSuchMethod(Invocation.setter(#db, _db),
      returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i10.Future<dynamic> init() =>
      (super.noSuchMethod(Invocation.method(#init, []),
          returnValue: Future<dynamic>.value()) as _i10.Future<dynamic>);
  @override
  _i10.Future<void> insert(String? table, Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#insert, [table, data]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<List<Map<String, Object?>>?> getData(
          String? table,
          String? orderByColumn,
          bool? incompleteOnly,
          bool? favouritesOnly,
          bool? toolkitsOnly) =>
      (super.noSuchMethod(
              Invocation.method(#getData, [
                table,
                orderByColumn,
                incompleteOnly,
                favouritesOnly,
                toolkitsOnly
              ]),
              returnValue: Future<List<Map<String, Object?>>?>.value())
          as _i10.Future<List<Map<String, Object?>>?>);
  @override
  _i10.Future<List<Map<String, Object?>>?> getDataQuery(
          String? table, String? where) =>
      (super.noSuchMethod(Invocation.method(#getDataQuery, [table, where]),
              returnValue: Future<List<Map<String, Object?>>?>.value())
          as _i10.Future<List<Map<String, Object?>>?>);
  @override
  _i10.Future<List<Map<String, Object?>>?> getDataQueryWithJoin(
          String? select, String? tablesAndJoin, String? where) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getDataQueryWithJoin, [select, tablesAndJoin, where]),
              returnValue: Future<List<Map<String, Object?>>?>.value())
          as _i10.Future<List<Map<String, Object?>>?>);
  @override
  _i10.Future<int?> getTableRowCount(String? table) =>
      (super.noSuchMethod(Invocation.method(#getTableRowCount, [table]),
          returnValue: Future<int?>.value()) as _i10.Future<int?>);
  @override
  _i10.Future<void> deleteAll(String? table) => (super.noSuchMethod(
      Invocation.method(#deleteAll, [table]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> updateQuery(
          {String? table,
          String? setFields,
          String? whereClause,
          int? limitRowCount}) =>
      (super.noSuchMethod(
              Invocation.method(#updateQuery, [], {
                #table: table,
                #setFields: setFields,
                #whereClause: whereClause,
                #limitRowCount: limitRowCount
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> deleteQuery(
          {String? table, String? whereClause, int? limitRowCount}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteQuery, [], {
                #table: table,
                #whereClause: whereClause,
                #limitRowCount: limitRowCount
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> deleteAllData() => (super.noSuchMethod(
      Invocation.method(#deleteAllData, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [PreferencesController].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesController extends _i1.Mock
    implements _i11.PreferencesController {
  MockPreferencesController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<bool> saveBool(String? sharedPreferencesKey, bool? value) =>
      (super.noSuchMethod(
          Invocation.method(#saveBool, [sharedPreferencesKey, value]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> getBool(String? sharedPreferencesKey) =>
      (super.noSuchMethod(Invocation.method(#getBool, [sharedPreferencesKey]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> saveString(
          String? sharedPreferencesKey, String? newValue) =>
      (super.noSuchMethod(
          Invocation.method(#saveString, [sharedPreferencesKey, newValue]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> addToStringList(
          String? sharedPreferencesKey, String? newValue) =>
      (super.noSuchMethod(
          Invocation.method(#addToStringList, [sharedPreferencesKey, newValue]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<List<String>> removeFromStringList(
          String? sharedPreferencesKey, String? newValue) =>
      (super.noSuchMethod(
              Invocation.method(
                  #removeFromStringList, [sharedPreferencesKey, newValue]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i10.Future<List<String>>);
  @override
  _i10.Future<String> getString(String? sharedPreferencesKey) =>
      (super.noSuchMethod(Invocation.method(#getString, [sharedPreferencesKey]),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Future<List<String>> getStringList(String? sharedPreferencesKey) =>
      (super.noSuchMethod(
              Invocation.method(#getStringList, [sharedPreferencesKey]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i10.Future<List<String>>);
  @override
  _i10.Future<bool> saveInt(String? sharedPreferencesKey, int? value) => (super
      .noSuchMethod(Invocation.method(#saveInt, [sharedPreferencesKey, value]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<int?> getInt(String? sharedPreferencesKey) =>
      (super.noSuchMethod(Invocation.method(#getInt, [sharedPreferencesKey]),
          returnValue: Future<int?>.value()) as _i10.Future<int?>);
}

/// A class which mocks [ProviderHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockProviderHelper extends _i1.Mock implements _i12.ProviderHelper {
  MockProviderHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebServices get webServices =>
      (super.noSuchMethod(Invocation.getter(#webServices),
          returnValue: _FakeWebServices_0()) as _i2.WebServices);
  @override
  set webServices(_i2.WebServices? _webServices) =>
      super.noSuchMethod(Invocation.setter(#webServices, _webServices),
          returnValueForMissingStub: null);
  @override
  _i10.Future<List<_i13.Question>> fetchAndSaveQuestions(
          _i8.DatabaseProvider? dbProvider,
          String? tableName,
          String? assetType) =>
      (super.noSuchMethod(
              Invocation.method(
                  #fetchAndSaveQuestions, [dbProvider, tableName, assetType]),
              returnValue: Future<List<_i13.Question>>.value(<_i13.Question>[]))
          as _i10.Future<List<_i13.Question>>);
  @override
  _i10.Future<List<_i14.Recipe>> fetchAndSaveRecipes(
          _i8.DatabaseProvider? dbProvider) =>
      (super.noSuchMethod(Invocation.method(#fetchAndSaveRecipes, [dbProvider]),
              returnValue: Future<List<_i14.Recipe>>.value(<_i14.Recipe>[]))
          as _i10.Future<List<_i14.Recipe>>);
  @override
  _i10.Future<List<_i15.LessonTask>> fetchAndSaveTaskForLesson(
          _i8.DatabaseProvider? dbProvider,
          {int? lessonID}) =>
      (super.noSuchMethod(
          Invocation.method(
              #fetchAndSaveTaskForLesson, [dbProvider], {#lessonID: lessonID}),
          returnValue:
              Future<List<_i15.LessonTask>>.value(<_i15.LessonTask>[])) as _i10
          .Future<List<_i15.LessonTask>>);
  @override
  _i10.Future<_i3.ModulesAndLessons> fetchAndSaveModuleExport(
          _i8.DatabaseProvider? dbProvider,
          bool? forceRefresh,
          DateTime? nextLessonAvailableDate) =>
      (super.noSuchMethod(
              Invocation.method(#fetchAndSaveModuleExport,
                  [dbProvider, forceRefresh, nextLessonAvailableDate]),
              returnValue: Future<_i3.ModulesAndLessons>.value(
                  _FakeModulesAndLessons_1()))
          as _i10.Future<_i3.ModulesAndLessons>);
  @override
  _i10.Future<List<_i16.Message>> fetchAndSaveMessages(
          _i8.DatabaseProvider? dbProvider, bool? refreshFromAPI) =>
      (super.noSuchMethod(
              Invocation.method(
                  #fetchAndSaveMessages, [dbProvider, refreshFromAPI]),
              returnValue: Future<List<_i16.Message>>.value(<_i16.Message>[]))
          as _i10.Future<List<_i16.Message>>);
  @override
  _i10.Future<List<String>> fetchAndSaveCMSText(
          _i8.DatabaseProvider? dbProvider) =>
      (super.noSuchMethod(Invocation.method(#fetchAndSaveCMSText, [dbProvider]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i10.Future<List<String>>);
  @override
  _i10.Future<_i4.AllFavourites> getFavourites(
          _i8.DatabaseProvider? dbProvider) =>
      (super.noSuchMethod(Invocation.method(#getFavourites, [dbProvider]),
              returnValue:
                  Future<_i4.AllFavourites>.value(_FakeAllFavourites_2()))
          as _i10.Future<_i4.AllFavourites>);
  @override
  _i10.Future<List<dynamic>> filterAndSearch(
          _i8.DatabaseProvider? dbProvider,
          String? tableName,
          String? searchText,
          String? tag,
          List<String>? secondaryTags) =>
      (super.noSuchMethod(
              Invocation.method(#filterAndSearch,
                  [dbProvider, tableName, searchText, tag, secondaryTags]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i10.Future<List<dynamic>>);
  @override
  _i10.Future<void> markNotificationAsRead(
          _i8.DatabaseProvider? dbProvider, int? notificationId) =>
      (super.noSuchMethod(
              Invocation.method(
                  #markNotificationAsRead, [dbProvider, notificationId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> markNotificationAsDeleted(
          _i8.DatabaseProvider? dbProvider, int? notificationId) =>
      (super.noSuchMethod(
              Invocation.method(
                  #markNotificationAsDeleted, [dbProvider, notificationId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<bool> markTaskAsCompleted(
          _i8.DatabaseProvider? dbProvider, int? lessonTaskID, String? value) =>
      (super.noSuchMethod(
          Invocation.method(
              #markTaskAsCompleted, [dbProvider, lessonTaskID, value]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<void> addToFavourites(
          bool? isAdd,
          _i8.DatabaseProvider? dbProvider,
          _i17.FavouriteType? favouriteType,
          int? itemId) =>
      (super.noSuchMethod(
              Invocation.method(
                  #addToFavourites, [isAdd, dbProvider, favouriteType, itemId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<List<dynamic>> getAllData(
          _i8.DatabaseProvider? dbProvider, String? tableName,
          {String? orderByColumn = r'',
          bool? incompleteOnly = false,
          bool? favouritesOnly = false,
          bool? toolkitsOnly = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getAllData, [
                dbProvider,
                tableName
              ], {
                #orderByColumn: orderByColumn,
                #incompleteOnly: incompleteOnly,
                #favouritesOnly: favouritesOnly,
                #toolkitsOnly: toolkitsOnly
              }),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i10.Future<List<dynamic>>);
  @override
  List<dynamic> mapDataToList(dynamic dataList, String? tableName) => (super
      .noSuchMethod(Invocation.method(#mapDataToList, [dataList, tableName]),
          returnValue: <dynamic>[]) as List<dynamic>);
  @override
  _i10.Future<bool> saveTimestamp(String? tableName) =>
      (super.noSuchMethod(Invocation.method(#saveTimestamp, [tableName]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<int?> getTimestamp(String? tableName) =>
      (super.noSuchMethod(Invocation.method(#getTimestamp, [tableName]),
          returnValue: Future<int?>.value()) as _i10.Future<int?>);
}

/// A class which mocks [WebServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebServices extends _i1.Mock implements _i2.WebServices {
  MockWebServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i10.Future<bool> checkInternetConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkInternetConnectivity, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<_i18.Token?> signIn(String? emailAddress, String? password) =>
      (super.noSuchMethod(Invocation.method(#signIn, [emailAddress, password]),
              returnValue: Future<_i18.Token?>.value())
          as _i10.Future<_i18.Token?>);
  @override
  _i10.Future<_i18.Token?> refreshToken() => (super.noSuchMethod(
      Invocation.method(#refreshToken, []),
      returnValue: Future<_i18.Token?>.value()) as _i10.Future<_i18.Token?>);
  @override
  _i10.Future<bool> forgotPassword(String? emailAddress) =>
      (super.noSuchMethod(Invocation.method(#forgotPassword, [emailAddress]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<_i5.Member> getMemberDetails() =>
      (super.noSuchMethod(Invocation.method(#getMemberDetails, []),
              returnValue: Future<_i5.Member>.value(_FakeMember_3()))
          as _i10.Future<_i5.Member>);
  @override
  _i10.Future<bool> setMemberWhy(String? memberId, String? why) =>
      (super.noSuchMethod(Invocation.method(#setMemberWhy, [memberId, why]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> updateMemberDetails(String? encodedMemberDetails) =>
      (super.noSuchMethod(
          Invocation.method(#updateMemberDetails, [encodedMemberDetails]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> resetPassword(
          String? usernameOrEmail, String? newPassword) =>
      (super.noSuchMethod(
          Invocation.method(#resetPassword, [usernameOrEmail, newPassword]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<List<_i19.ModuleExport>?> getModulesExport() =>
      (super.noSuchMethod(Invocation.method(#getModulesExport, []),
              returnValue: Future<List<_i19.ModuleExport>?>.value())
          as _i10.Future<List<_i19.ModuleExport>?>);
  @override
  _i10.Future<List<_i20.Module>?> getAllModules() =>
      (super.noSuchMethod(Invocation.method(#getAllModules, []),
              returnValue: Future<List<_i20.Module>?>.value())
          as _i10.Future<List<_i20.Module>?>);
  @override
  _i10.Future<List<_i20.Module>?> getIncompleteModules() =>
      (super.noSuchMethod(Invocation.method(#getIncompleteModules, []),
              returnValue: Future<List<_i20.Module>?>.value())
          as _i10.Future<List<_i20.Module>?>);
  @override
  _i10.Future<List<_i20.Module>?> getCompleteModules() =>
      (super.noSuchMethod(Invocation.method(#getCompleteModules, []),
              returnValue: Future<List<_i20.Module>?>.value())
          as _i10.Future<List<_i20.Module>?>);
  @override
  _i10.Future<bool> setModuleComplete(int? moduleId) =>
      (super.noSuchMethod(Invocation.method(#setModuleComplete, [moduleId]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<DateTime> setLessonComplete(int? lessonId) =>
      (super.noSuchMethod(Invocation.method(#setLessonComplete, [lessonId]),
              returnValue: Future<DateTime>.value(_FakeDateTime_4()))
          as _i10.Future<DateTime>);
  @override
  _i10.Future<bool> setTaskComplete(int? taskId, String? value) =>
      (super.noSuchMethod(Invocation.method(#setTaskComplete, [taskId, value]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<List<_i21.Lesson>?> getAllLessonsForModule(int? moduleId) =>
      (super.noSuchMethod(
              Invocation.method(#getAllLessonsForModule, [moduleId]),
              returnValue: Future<List<_i21.Lesson>?>.value())
          as _i10.Future<List<_i21.Lesson>?>);
  @override
  _i10.Future<List<_i15.LessonTask>?> getIncompleteTasks(int? lessonId) =>
      (super.noSuchMethod(Invocation.method(#getIncompleteTasks, [lessonId]),
              returnValue: Future<List<_i15.LessonTask>?>.value())
          as _i10.Future<List<_i15.LessonTask>?>);
  @override
  _i10.Future<List<_i15.LessonTask>?> getTasksForLesson(int? lessonId) =>
      (super.noSuchMethod(Invocation.method(#getTasksForLesson, [lessonId]),
              returnValue: Future<List<_i15.LessonTask>?>.value())
          as _i10.Future<List<_i15.LessonTask>?>);
  @override
  _i10.Future<List<_i15.LessonTask>?> getQuizTasks() =>
      (super.noSuchMethod(Invocation.method(#getQuizTasks, []),
              returnValue: Future<List<_i15.LessonTask>?>.value())
          as _i10.Future<List<_i15.LessonTask>?>);
  @override
  _i10.Future<List<_i14.Recipe>?> getAllRecipes() =>
      (super.noSuchMethod(Invocation.method(#getAllRecipes, []),
              returnValue: Future<List<_i14.Recipe>?>.value())
          as _i10.Future<List<_i14.Recipe>?>);
  @override
  _i10.Future<String?> getCmsAssetByReference(String? reference) => (super
      .noSuchMethod(Invocation.method(#getCmsAssetByReference, [reference]),
          returnValue: Future<String?>.value()) as _i10.Future<String?>);
  @override
  _i10.Future<List<_i22.CMS>?> getCMSByType(String? cmsType) =>
      (super.noSuchMethod(Invocation.method(#getCMSByType, [cmsType]),
              returnValue: Future<List<_i22.CMS>?>.value())
          as _i10.Future<List<_i22.CMS>?>);
  @override
  _i10.Future<List<_i16.Message>?> getAllUserNotifications() =>
      (super.noSuchMethod(Invocation.method(#getAllUserNotifications, []),
              returnValue: Future<List<_i16.Message>?>.value())
          as _i10.Future<List<_i16.Message>?>);
  @override
  _i10.Future<bool> markNotificationAsRead(int? notificationId) =>
      (super.noSuchMethod(
          Invocation.method(#markNotificationAsRead, [notificationId]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> markNotificationAsDeleted(int? notificationId) =>
      (super.noSuchMethod(
          Invocation.method(#markNotificationAsDeleted, [notificationId]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> addToFavourites(String? assetType, int? assetId) => (super
      .noSuchMethod(Invocation.method(#addToFavourites, [assetType, assetId]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> removeFromFavourites(String? assetType, int? assetId) =>
      (super.noSuchMethod(
          Invocation.method(#removeFromFavourites, [assetType, assetId]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> checkVersion(String? platform, String? version) =>
      (super.noSuchMethod(Invocation.method(#checkVersion, [platform, version]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
}

/// A class which mocks [FlavorConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlavorConfig extends _i1.Mock implements _i7.FlavorConfig {
  MockFlavorConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Flavor get flavor => (super.noSuchMethod(Invocation.getter(#flavor),
      returnValue: _i7.Flavor.DEV) as _i7.Flavor);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i6.Color get color => (super.noSuchMethod(Invocation.getter(#color),
      returnValue: _FakeColor_5()) as _i6.Color);
  @override
  _i7.FlavorValues get values => (super.noSuchMethod(Invocation.getter(#values),
      returnValue: _FakeFlavorValues_6()) as _i7.FlavorValues);
}
