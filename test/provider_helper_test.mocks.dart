// Mocks generated by Mockito 5.2.0 from annotations
// in thepcosprotocol_app/test/provider_helper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:ui' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i6;
import 'package:thepcosprotocol_app/config/flavors.dart' as _i4;
import 'package:thepcosprotocol_app/models/cms.dart' as _i15;
import 'package:thepcosprotocol_app/models/lesson.dart' as _i12;
import 'package:thepcosprotocol_app/models/lesson_task.dart' as _i13;
import 'package:thepcosprotocol_app/models/member.dart' as _i2;
import 'package:thepcosprotocol_app/models/message.dart' as _i16;
import 'package:thepcosprotocol_app/models/module.dart' as _i11;
import 'package:thepcosprotocol_app/models/module_export.dart' as _i10;
import 'package:thepcosprotocol_app/models/recipe.dart' as _i14;
import 'package:thepcosprotocol_app/models/token.dart' as _i9;
import 'package:thepcosprotocol_app/providers/database_provider.dart' as _i5;
import 'package:thepcosprotocol_app/services/webservices.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMember_0 extends _i1.Fake implements _i2.Member {}

class _FakeDateTime_1 extends _i1.Fake implements DateTime {}

class _FakeColor_2 extends _i1.Fake implements _i3.Color {}

class _FakeFlavorValues_3 extends _i1.Fake implements _i4.FlavorValues {}

/// A class which mocks [DatabaseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseProvider extends _i1.Mock implements _i5.DatabaseProvider {
  MockDatabaseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set db(_i6.Database? _db) => super.noSuchMethod(Invocation.setter(#db, _db),
      returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i7.Future<dynamic> init() =>
      (super.noSuchMethod(Invocation.method(#init, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  _i7.Future<void> insert(String? table, Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#insert, [table, data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<List<Map<String, Object?>>?> getData(
          String? table,
          String? orderByColumn,
          bool? incompleteOnly,
          bool? favouritesOnly,
          bool? toolkitsOnly) =>
      (super.noSuchMethod(
              Invocation.method(#getData, [
                table,
                orderByColumn,
                incompleteOnly,
                favouritesOnly,
                toolkitsOnly
              ]),
              returnValue: Future<List<Map<String, Object?>>?>.value())
          as _i7.Future<List<Map<String, Object?>>?>);
  @override
  _i7.Future<List<Map<String, Object?>>?> getDataQuery(
          String? table, String? where) =>
      (super.noSuchMethod(Invocation.method(#getDataQuery, [table, where]),
              returnValue: Future<List<Map<String, Object?>>?>.value())
          as _i7.Future<List<Map<String, Object?>>?>);
  @override
  _i7.Future<List<Map<String, Object?>>?> getDataQueryWithJoin(
          String? select, String? tablesAndJoin, String? where) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getDataQueryWithJoin, [select, tablesAndJoin, where]),
              returnValue: Future<List<Map<String, Object?>>?>.value())
          as _i7.Future<List<Map<String, Object?>>?>);
  @override
  _i7.Future<int?> getTableRowCount(String? table) =>
      (super.noSuchMethod(Invocation.method(#getTableRowCount, [table]),
          returnValue: Future<int?>.value()) as _i7.Future<int?>);
  @override
  _i7.Future<void> deleteAll(String? table) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [table]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> updateQuery(
          {String? table,
          String? setFields,
          String? whereClause,
          int? limitRowCount}) =>
      (super.noSuchMethod(
          Invocation.method(#updateQuery, [], {
            #table: table,
            #setFields: setFields,
            #whereClause: whereClause,
            #limitRowCount: limitRowCount
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteQuery(
          {String? table, String? whereClause, int? limitRowCount}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteQuery, [], {
            #table: table,
            #whereClause: whereClause,
            #limitRowCount: limitRowCount
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteAllData() =>
      (super.noSuchMethod(Invocation.method(#deleteAllData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  void addListener(_i3.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i3.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [WebServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebServices extends _i1.Mock implements _i8.WebServices {
  MockWebServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i7.Future<bool> checkInternetConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkInternetConnectivity, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<_i9.Token?> signIn(String? emailAddress, String? password) =>
      (super.noSuchMethod(Invocation.method(#signIn, [emailAddress, password]),
          returnValue: Future<_i9.Token?>.value()) as _i7.Future<_i9.Token?>);
  @override
  _i7.Future<_i9.Token?> refreshToken() =>
      (super.noSuchMethod(Invocation.method(#refreshToken, []),
          returnValue: Future<_i9.Token?>.value()) as _i7.Future<_i9.Token?>);
  @override
  _i7.Future<bool> forgotPassword(String? emailAddress) =>
      (super.noSuchMethod(Invocation.method(#forgotPassword, [emailAddress]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<_i2.Member> getMemberDetails() =>
      (super.noSuchMethod(Invocation.method(#getMemberDetails, []),
              returnValue: Future<_i2.Member>.value(_FakeMember_0()))
          as _i7.Future<_i2.Member>);
  @override
  _i7.Future<bool> setMemberWhy(String? memberId, String? why) =>
      (super.noSuchMethod(Invocation.method(#setMemberWhy, [memberId, why]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<bool> updateMemberDetails(String? encodedMemberDetails) =>
      (super.noSuchMethod(
          Invocation.method(#updateMemberDetails, [encodedMemberDetails]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<bool> resetPassword(
          String? usernameOrEmail, String? newPassword) =>
      (super.noSuchMethod(
          Invocation.method(#resetPassword, [usernameOrEmail, newPassword]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<List<_i10.ModuleExport>?> getModulesExport() =>
      (super.noSuchMethod(Invocation.method(#getModulesExport, []),
              returnValue: Future<List<_i10.ModuleExport>?>.value())
          as _i7.Future<List<_i10.ModuleExport>?>);
  @override
  _i7.Future<List<_i11.Module>?> getAllModules() =>
      (super.noSuchMethod(Invocation.method(#getAllModules, []),
              returnValue: Future<List<_i11.Module>?>.value())
          as _i7.Future<List<_i11.Module>?>);
  @override
  _i7.Future<List<_i11.Module>?> getIncompleteModules() =>
      (super.noSuchMethod(Invocation.method(#getIncompleteModules, []),
              returnValue: Future<List<_i11.Module>?>.value())
          as _i7.Future<List<_i11.Module>?>);
  @override
  _i7.Future<List<_i11.Module>?> getCompleteModules() =>
      (super.noSuchMethod(Invocation.method(#getCompleteModules, []),
              returnValue: Future<List<_i11.Module>?>.value())
          as _i7.Future<List<_i11.Module>?>);
  @override
  _i7.Future<bool> setModuleComplete(int? moduleId) =>
      (super.noSuchMethod(Invocation.method(#setModuleComplete, [moduleId]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<DateTime> setLessonComplete(int? lessonId) =>
      (super.noSuchMethod(Invocation.method(#setLessonComplete, [lessonId]),
              returnValue: Future<DateTime>.value(_FakeDateTime_1()))
          as _i7.Future<DateTime>);
  @override
  _i7.Future<bool> setTaskComplete(int? taskId, String? value) =>
      (super.noSuchMethod(Invocation.method(#setTaskComplete, [taskId, value]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<List<_i12.Lesson>?> getAllLessonsForModule(int? moduleId) => (super
          .noSuchMethod(Invocation.method(#getAllLessonsForModule, [moduleId]),
              returnValue: Future<List<_i12.Lesson>?>.value())
      as _i7.Future<List<_i12.Lesson>?>);
  @override
  _i7.Future<List<_i13.LessonTask>?> getIncompleteTasks(int? lessonId) =>
      (super.noSuchMethod(Invocation.method(#getIncompleteTasks, [lessonId]),
              returnValue: Future<List<_i13.LessonTask>?>.value())
          as _i7.Future<List<_i13.LessonTask>?>);
  @override
  _i7.Future<List<_i13.LessonTask>?> getTasksForLesson(int? lessonId) =>
      (super.noSuchMethod(Invocation.method(#getTasksForLesson, [lessonId]),
              returnValue: Future<List<_i13.LessonTask>?>.value())
          as _i7.Future<List<_i13.LessonTask>?>);
  @override
  _i7.Future<List<_i13.LessonTask>?> getQuizTasks() =>
      (super.noSuchMethod(Invocation.method(#getQuizTasks, []),
              returnValue: Future<List<_i13.LessonTask>?>.value())
          as _i7.Future<List<_i13.LessonTask>?>);
  @override
  _i7.Future<List<_i14.Recipe>?> getAllRecipes() =>
      (super.noSuchMethod(Invocation.method(#getAllRecipes, []),
              returnValue: Future<List<_i14.Recipe>?>.value())
          as _i7.Future<List<_i14.Recipe>?>);
  @override
  _i7.Future<String?> getCmsAssetByReference(String? reference) => (super
      .noSuchMethod(Invocation.method(#getCmsAssetByReference, [reference]),
          returnValue: Future<String?>.value()) as _i7.Future<String?>);
  @override
  _i7.Future<List<_i15.CMS>?> getCMSByType(String? cmsType) =>
      (super.noSuchMethod(Invocation.method(#getCMSByType, [cmsType]),
              returnValue: Future<List<_i15.CMS>?>.value())
          as _i7.Future<List<_i15.CMS>?>);
  @override
  _i7.Future<List<_i16.Message>?> getAllUserNotifications() =>
      (super.noSuchMethod(Invocation.method(#getAllUserNotifications, []),
              returnValue: Future<List<_i16.Message>?>.value())
          as _i7.Future<List<_i16.Message>?>);
  @override
  _i7.Future<bool> markNotificationAsRead(int? notificationId) =>
      (super.noSuchMethod(
          Invocation.method(#markNotificationAsRead, [notificationId]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<bool> markNotificationAsDeleted(int? notificationId) =>
      (super.noSuchMethod(
          Invocation.method(#markNotificationAsDeleted, [notificationId]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<bool> addToFavourites(String? assetType, int? assetId) => (super
      .noSuchMethod(Invocation.method(#addToFavourites, [assetType, assetId]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<bool> removeFromFavourites(String? assetType, int? assetId) =>
      (super.noSuchMethod(
          Invocation.method(#removeFromFavourites, [assetType, assetId]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<bool> checkVersion(String? platform, String? version) =>
      (super.noSuchMethod(Invocation.method(#checkVersion, [platform, version]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
}

/// A class which mocks [FlavorConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlavorConfig extends _i1.Mock implements _i4.FlavorConfig {
  MockFlavorConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Flavor get flavor => (super.noSuchMethod(Invocation.getter(#flavor),
      returnValue: _i4.Flavor.DEV) as _i4.Flavor);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i3.Color get color => (super.noSuchMethod(Invocation.getter(#color),
      returnValue: _FakeColor_2()) as _i3.Color);
  @override
  _i4.FlavorValues get values => (super.noSuchMethod(Invocation.getter(#values),
      returnValue: _FakeFlavorValues_3()) as _i4.FlavorValues);
}
